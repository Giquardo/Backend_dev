@page "/update-album/{albumId:int}"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage
@using Blazored.LocalStorage
@code {
    [Parameter]
    public int AlbumId { get; set; }

    private AlbumSummaryDto album = new AlbumSummaryDto();

    protected override async Task OnInitializedAsync()
    {
        var token = await LocalStorage.GetItemAsync<string>("authToken");
        if (string.IsNullOrEmpty(token))
        {
            Navigation.NavigateTo("/login");
            return;
        }

        Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        album = await Http.GetFromJsonAsync<AlbumSummaryDto>($"api/v1/albums/{AlbumId}");
    }

    private async Task HandleValidSubmit()
    {
        var token = await LocalStorage.GetItemAsync<string>("authToken");
        if (string.IsNullOrEmpty(token))
        {
            Navigation.NavigateTo("/login");
            return;
        }

        Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        var response = await Http.PutAsJsonAsync($"api/v1/albums/{AlbumId}", album);

        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/albums");
        }
        else
        {
            // Handle error
        }
    }

    private async Task DeleteAlbum()
    {
        var token = await LocalStorage.GetItemAsync<string>("authToken");
        if (string.IsNullOrEmpty(token))
        {
            Navigation.NavigateTo("/login");
            return;
        }

        Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        var response = await Http.DeleteAsync($"api/v1/albums/{AlbumId}");

        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/albums");
        }
        else
        {
            // Handle error
        }
    }

    public class AlbumSummaryDto
    {
        public int Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public IList<Photo> Photos { get; set; } = new List<Photo>();
        public int UserId { get; set; }
    }

    public class Photo
    {
        public int Id { get; set; }
        public string Url { get; set; } = string.Empty;
    }
}

<h3>Update Album</h3>

<EditForm Model="album" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="title">Title</label>
        <InputText id="title" class="form-control" @bind-Value="album.Title" />
    </div>

    <div class="form-group">
        <label for="description">Description</label>
        <InputTextArea id="description" class="form-control" @bind-Value="album.Description" />
    </div>

    <button type="submit" class="btn btn-primary">Update Album</button>
    <button type="button" class="btn btn-danger" @onclick="DeleteAlbum">Delete Album</button>
</EditForm>

<style>
    .form-group {
        margin-bottom: 15px;
    }

    .form-control {
        width: 100%;
        padding: 10px;
        box-sizing: border-box;
    }

    .btn {
        padding: 10px 20px;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        margin-right: 10px;
    }

    .btn-primary {
        background-color: #007bff;
    }

    .btn-primary:hover {
        background-color: #0056b3;
    }

    .btn-danger {
        background-color: #dc3545;
    }

    .btn-danger:hover {
        background-color: #c82333;
    }
</style>